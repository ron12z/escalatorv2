---
const { id, escalation, additionalDesc, options } = Astro.props.restriction;

const choices = Object.entries(options);
function firstCallTrue() {
	let called = false;
	return function () {
		if (!called) {
			called = true;
			return true;
		}
		return false;
	};
}

const firstOption = firstCallTrue();
---

<div id={`${id}-extra`} class="additional-input" data-main={id}>
	<h4>{additionalDesc}</h4>
	<div class="options">
		{
			choices.map(([label, value]) => (
				<div
					class={`option ${firstOption() ? "selected" : ""}`}
					data-value={value}
				>
					<p>{label}</p>
				</div>
			))
		}
	</div>
</div>

<script>
	const allChoicesExtra = document.querySelectorAll(".options");
	allChoicesExtra.forEach((choiceExtra) => {
		const choiceGroup = choiceExtra.querySelectorAll(".option");
		choiceGroup.forEach((choice) => {
			choice.addEventListener("click", () => {
				// Remove selected from all options
				choiceGroup.forEach((choice) => {
					choice.classList.remove("selected");
				});
				// Add selected to self
				choice.classList.add("selected");
			});
		});
	});
</script>

<style>
	.additional-input {
		background: rgb(132, 167, 132);
		display: flex;
		display: none;
		flex-direction: column;
		align-items: start;
		flex-grow: 1;
		gap: 0.5rem;
		cursor: default;
		border-top: none;
	}

	.options {
		display: flex;
		gap: 0.5rem;
	}

	.option {
		background: rgb(196, 196, 196);
		border: 1px solid black;
		padding: 0.4rem 0.5rem;
		border-radius: 0.5rem;
		font-size: 1rem;
		min-width: 4rem;
		text-align: center;
		cursor: pointer;
	}

	.option:hover {
		background: rgb(118, 204, 118);
	}

	.option:active {
		background: green;
	}

	.selected {
		background: #21cf30;
	}
</style>
