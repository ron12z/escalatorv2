---
import "../../styles/choices.css";
const { restriction } = Astro.props;
const divID = `${restriction.code}-extra`;

const optionKeys = Object.keys(restriction.options);
const options = restriction.options;
const code = restriction.code;
const optionDesc = restriction.optionDesc;
---

<choices-div id={`${divID}`} class="additional-input" data-code={code}>
	<h4>{optionDesc}:</h4>
	<div class="input-fields options">
		{
			optionKeys.map((optionKey: string) => (
				<option-div
					id={`${code}-${optionKey}`}
					class="option"
					data-code={code}
					data-escalation={options[optionKey][1]}
				>
					<p>{options[optionKey][0]}</p>
				</option-div>
			))
		}
	</div>
</choices-div>
<script>
	class ChoicesDiv extends HTMLElement {
		connectedCallback() {
			document.addEventListener("click", () => {
				if (linkage!.classList.contains("checked")) {
					this.style.display = "flex";
				} else {
					this.style.display = "none";
				}
			});

			const code = this.getAttribute("data-code");

			const linkage = document.querySelector(`#${code}`);
		}
	}

	customElements.define("choices-div", ChoicesDiv);
</script>

<script>
	class OptionDiv extends HTMLElement {
		connectedCallback() {
			function handleOptionClick(event: { currentTarget: any }) {
				const clicked = event.currentTarget;

				// Only put selected on clicked node
				options.forEach((option) => {
					option.classList.remove("selected");
				});

				clicked.classList.add("selected");
				linkage!.setAttribute("data-escalation", escalation);
			}

			this.addEventListener("click", handleOptionClick);

			const code = this.getAttribute("data-code");
			const divID = `${code}-extra`;
			const field = document.querySelector(`#${divID}`);
			const options = field!.querySelectorAll(".option");

			const escalation = this.getAttribute("data-escalation")!;
			const linkage = document.querySelector(`#${code}`);
		}
	}

	customElements.define("option-div", OptionDiv);
</script>
