---
import Choices from "./extraInput/Choices.astro";
import Inputs from "./extraInput/Inputs.astro";

export interface Restriction {
	id: string;
	display: string;
	description: string;
	escalation: string;
	additionalDesc?: string;
	options?: [{ [key: string]: string }];
	slot1?: { [key: string]: string };
	slot2?: { [key: string]: string };
	slot3?: { [key: string]: string };
	slot4?: { [key: string]: string };
}

//
const { restriction } = Astro.props;
const id = restriction.id;
const display = restriction.display;
const description = restriction.description;
const escalation = restriction.escalation;
const additionalDesc = restriction.additionalDesc;
const options = restriction.options;
const slot1 = restriction.slot1;
const slot2 = restriction.slot2;
const slot3 = restriction.slot3;
const slot4 = restriction.slot4;

const additionalInputID = `${id}-extra`;
---

<div class="selection-wrapper">
	<div
		id={id}
		class="selection tooltip"
		data-extra-id={additionalInputID}
		data-escalation={escalation}
	>
		<p class="tooltip">
			{display}
			<span class="tooltiptext">{description}</span>
		</p>
	</div>

	{options && <Choices restriction={restriction} />}

	{!options && additionalDesc && <Inputs restriction={restriction} />}
</div>

<script>
	import Escalation from "../scripts/escalation";

	const allSelections = document.querySelectorAll(".selection");

	allSelections.forEach((selection) => {
		const id = selection.getAttribute("id");
		const linkedExtraID = selection.getAttribute("data-extra-id");
		const linkedExtra = document.querySelector(`#${linkedExtraID}`);

		// Add toggle functionality
		selection.addEventListener("click", () => {
			selection.classList.toggle("checked");

			switch (selection.classList.contains("checked")) {
				case true:
					// selection is checked
					if (linkedExtra) {
						// selection checked + additional input
						(linkedExtra as HTMLElement).style.display = "flex";
					}

					Escalation.addEscalation(id);
					break;

				case false:
					// selection is not checked
					if (linkedExtra) {
						(linkedExtra as HTMLElement).style.display = "none";
					}

					Escalation.removeEscalation(id);

					break;
			}

			Escalation.updateResult();
		});
	});
</script>

<style>
	.selection {
		display: block;
		padding: 1rem;
		background: rgb(168, 205, 216);
		border-top: 1px solid black;
		position: relative;
	}

	.selection:hover {
		outline: 3px solid rgb(69, 135, 156);
		outline-offset: -0.2rem;
	}

	.selection:active {
		background: rgb(134, 168, 179);
	}

	.checked {
		background: #1eb32b;
	}

	.tooltiptext {
		visibility: hidden;
		position: absolute;
		border: 1px solid black;
		top: 0;
		left: calc(30%);
		text-align: center;
		padding: 1rem;
		border: 1px solid white;
		border-radius: 0.5rem;
		background: #000;
		color: white;
		z-index: 222;
	}

	.tooltip:hover .tooltiptext {
		visibility: visible;
	}
</style>
